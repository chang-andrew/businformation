/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'eclipse'
sourceCompatibility = 1.8
targetCompatibility = 1.8
// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    compile 'org.seleniumhq.selenium:selenium-java:3.14.0'
    
    compile (
        'com.amazonaws:aws-lambda-java-core:1.1.0',
        'com.amazonaws:aws-lambda-java-events:1.1.0'
    )
    compile 'com.amazonaws:aws-java-sdk-lambda:1.9.16'
    

    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    
    // https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api
    compile 'javax.servlet:javax.servlet-api:4.0.1' 
    
    // https://mvnrepository.com/artifact/javax.ws.rs/javax.ws.rs-api
    compile 'javax.ws.rs:javax.ws.rs-api:2.1'
    
    // https://mvnrepository.com/artifact/org.glassfish.main.common/glassfish-api
    compile 'org.glassfish.main.common:glassfish-api:5.0'
    
    // https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-client
    compile 'org.glassfish.jersey.core:jersey-client:2.27'
 }

task buildZip(type: Zip) {
    from compileJava
    from processResources              
    into('lib') {
        from configurations.compileClasspath
    }           
}

build.dependsOn buildZip

